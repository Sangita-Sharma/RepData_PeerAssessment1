find.package("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
swirl()
swirl
swirl()
library(swirl)
swirl()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
getpwd()
getwd()
list.files("spectra"")
0
q
bye
bye()
quit
q()
list.files(specdata)
q()
;
escape
list.files(specdata)
list.files("specdata"")
list.files(specdata)
pollutantmean("specdata", "sulfate", 1)
library.swirl()
swirl()
library("swirl")
swirl()
pollutantmean("specdata", "sulfate", 1:10)
source("pollutant.r")
source("pollutantmean.r")
pollutantmean("specdata", "sulfate", 1:10)
}
data = c(data, newRead[[pollutant]])
# }
source("pollutantmean.r")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1)
for(i in id)
1
pollutantmean("specdata", "sulfate", 1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1)
pollutantmean("specdata", "sulfate", 1:10)
}
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R')
getwd()
setwd("~/")
getwd()
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R')
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R')
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/pollutantmean.R', echo=TRUE)
getwd()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
}
pollutantmean("specdata", "nitrate", 23)
}
complete("specdata", c(2, 4, 8, 10, 12))
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
for (i in id) {
source("complete.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
source("complete.R")
getwd()
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
source("complete.R"")
source(complete.R)
source("complete.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/complete.R', echo=TRUE)
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
complete("specdata", 30:25)
list.files("specdata")
}
source("corr.R")
source("corr.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/corr.R', echo=TRUE)
source("corr.R")
source("corr.R")
source("complete.R")
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 100)
head(cr)
?numeric
summary(cr)
?head
cr <- corr("specdata", 100)
head(cr)
cr <- corr("specdata", 1000)
head(cr)
cor?
?cor
source("corr.R")
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/corr.R', echo=TRUE)
source("complete.R")
source("complete.R")
source("pollutantmean.R")
source("complete.R")
complete(specdata, 1)
complete("specdata", 1)
cr <- corr("specdata", 1000)
head(cr)
cr <- corr("specdata", 1000)
head(cr)
source('D:/D Drive/Materials/Data Science/Lesson 2/Week2/Week2 Quiz/corr.R', echo=TRUE)
source("complete.R")
source("complete.R")
complete("specdata", 1)
source("specdata")
source(directory)
source("pollutantmean.R")
pollutantmean("specdata",sulphate,1)
pollutantmean("specdata",sulfate,1)
pollutantmean("specdata","sulfate",1)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1)
pollutantmean("specdata","nitrate",1)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 23)
## Caching the Inverse of a Matrix
source("ProgrammingAssignment2/cachematrix.R")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
my_matrix<-makeCacheMatrix(matrix (1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
my_matrix<-makeCacheMatrix(matrix (1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
my_matrix<-makeCacheMatrix(matrix (1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix<-makeCacheMatrix(matrix (2, 2, 1, 4), 2, 2))
my_matrix<-makeCacheMatrix(matrix (2, 2, 1, 4), 2, 2)
my_matrix<-makeCacheMatrix(c(2, 2, 1, 4), 2, 2)
my_matrix<-makeCacheMatrix(matrix c(2, 2, 1, 4), 2, 2)
my_matrix$set(matrix c(2, 2, 1, 4), 2, 2))
my_matrix$set(matrix (c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
set.seed(1)
rpois(5,2)
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
outcome<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source(outcome-of-care-measures.csv)
source("outcome-of-care-measures.csv")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
## Caching the Inverse of a Matrix
source("outcome-of-care-measures.csv")
setwd("C:/Users/i50096/rprog_data_ProgAssignment3-data")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source("outcome-of-care-measures.csv")
source('C:/Users/i50096/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
outcome<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[,11])
}
{
best <- function(state, outcome)
source(best.r)
source("best.r")
}
source("best.r")
data.state <- data[data$State == state, ]
source("best.r")
best("TX", "heart attack")
best("MD", "heart attack")
best("BB", "heart attack")
best("NY", "heart attack")
best("NY", "hert attack")
}
source("rankhospital.r")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("best.r")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source("rankhospital.r")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source("rankall.r")
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
getwd()
source('C:/Users/i50096/rprog_data_ProgAssignment3-data/rankall.r', echo=TRUE)
getws()
getwd()
setwd("~/")
setwd("~/")
getwd()
fileurl <-  "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url=fileurl,destfile="idaho_housing.csv", mode =  "w", method="curl")
list.files(".")
download.file(url=fileUrl,destfile="idaho_housing.csv", mode =  "w", method="curl")
download.file(url=fileUrl,destfile="idaho_housing.csv", mode ="w", method="curl")
getwd()
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
head(idaho_h, 2)
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
source('C:/Users/i50096/rprog_data_ProgAssignment3-data/rankall.r', echo=TRUE)
getwd()
idaho_h  <- read.csv("getdata_data_ss06hid.xls")
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
idaho_h  <- read.csv("getdata_data_ss06hid.csv")
library(plyr)
ucidirectory <- "UCI\ HAR\ Dataset"
x_test_f <- paste(ucidirectory , "/test/X_test.txt", sep = "")
y_test_f <- paste(ucidirectory , "/test/y_test.txt", sep = "")
subject_test_f <- paste(ucidirectory , "/test/subject_test.txt", sep = "")
x_train_f <- paste(ucidirectory , "/train/X_train.txt", sep = "")
y_train_f <- paste(ucidirectory , "/train/y_train.txt", sep = "")
subject_train_f <- paste(ucidirectory , "/train/subject_train.txt", sep = "")
activitylabels<- read.table("activity_labels.txt", sep = "", col.names = c("ActivityId", "Activity"))
features<- read.table("features.txt", sep = "")
x_train <- read.table(x_train_f)
y_train <- read.table(y_train_f)
subject_train <- read.table(subject_train_f)
x_test <- read.table(x_test_f)
y_test <- read.table(y_test_f)
subject_test <- read.table(subject_test_f)
setwd("C:/Users/i50096/getdata_projectfiles_UCI HAR Dataset")
activitylabels<- read.table("activity_labels.txt", sep = "", col.names = c("ActivityId", "Activity"))
features<- read.table("features.txt", sep = "")
x_train <- read.table(x_train_f)
y_train <- read.table(y_train_f)
subject_train <- read.table(subject_train_f)
x_test <- read.table(x_test_f)
y_test <- read.table(y_test_f)
subject_test <- read.table(subject_test_f)
ucidirectory <- "UCI\ HAR\ Dataset"
activitylabels_f <- paste(ucidirectory, "", sep  =  "")
activitylabels<- read.table(activitylabels_f)
ucidirectory <- "UCI\ HAR\ Dataset"
activitylabels_f <- paste(ucidirectory, "/", sep  =  "")
activitylabels<- read.table(activitylabels_f)
setwd("C:/Users/i50096/repdata_data_activity")
cls = c("integer", "character", "integer")
datafile <- read.csv("activity.csv", head=TRUE, colClasses=cls, na.strings="NA")
head(datafile)
stepsperday <- tapply(datafile$steps, datafile$date, sum, na.rm=TRUE)
hist(x=stepsperday,
col="red",
breaks=20,
xlab="Daily total steps",
ylab="Frequency",
main="The distribution of daily total (missing data ignored)")
hist(x=stepsperday, col="green", breaks=20, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day")
hist(x=stepsperday, col="green", breaks=200, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day")
hist(x=stepsperday, col="green", breaks=10, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day")
hist(x=stepsperday, col="green", breaks=20, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day")
stepsperdaymean <- mean(stepsperday)
stepsperdaymedian <- median(stepsperday)
median(stepsperday)
mean(stepsperday)
avginterval <- tapply(steps, interval, mean, na.rm=TRUE, simplify=T)
avginterval <- tapply(datafile$steps, datafile$interval, mean, na.rm=TRUE, simplify=T)
library(ggplot2)
ggplot(data=avginterval, aes(x=interval, y=steps)) +    geom_line() + xlab("5-minute interval") +
ylab("average number of steps taken")
ggplot(avginterval, aes(x=interval, y=steps)) +
geom_line(color = "firebrick")
averagestepinterval <- aggregate(x=list(meansteps=datafile$steps), by=list(interval=datafile$interval), FUN=mean, na.rm=TRUE)
ggplot(data=averagestepinterval, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
ggplot(data=averagestepinterval, aes(x=interval, y=meansteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
mostSteps <- which.max(averagestepinterval$meanSteps)
which.max(averagestepinterval$meanSteps)
interval[which.max(averagestepinterval$meanSteps),]
print(mostSteps)
maxsteps <- max(datafile$avg)
datafile[datafile$avg == max_steps, ]
maxsteps <- max(datafile$avg)
datafile[datafile$avg == maxsteps, ]
max(datafile$avg)
mostSteps <- which.max(averagestepinterval$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averagestepinterval[mostSteps,'interval'])
r timeMostSteps
timeMostSteps
mostSteps <- which.max(averagestepinterval$meanSteps)
which.max(averagestepinterval$meanSteps)
averagestepinterval[averagestepinterval$meansteps==max(averagestepinterval$meansteps),]
sum(is.na(datafile$steps))
fulldata <- datafile
head(fulldata)
isna <- is.na(fulldata$steps)
head(isna)
avginterval <- tapply(fulldata$steps, fulldata$interval, mean, na.rm=TRUE, simplify=TRUE)
head(avginterval)
fulldata$steps[nas] <- avginterval[as.character(fulldata$interval[nas])]
fulldata$steps[isna] <- avginterval[as.character(fulldata$interval[isna])]
sum(is.na(fulldata$steps))
newstepsperday <- tapply(fulldata$steps, fulldata$date, sum)
hist(x=newstepsperday, col="green", breaks=200, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day")
newstepsperday <- tapply(fulldata$steps, fulldata$date, sum)
hist(x=newstepsperday, col="green", breaks=20, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day")
mean(newstepsperday)
median(newstepsperday)
head(newstepsperday)
head(fulldata)
newfulldata <- fulldata
head(newfulldata)
weekend <- weekdays(as.Date(newfulldata$date)) %in% c("Saturday", "Sunday")
head(weekend)
newfulldata$daytype <- "weekday"
newfulldata$daytype[weekend == TRUE] <- "weekend"
newfulldata$daytype <- as.factor(newfulldata$daytype)
str(newfulldata)
head(newfulldata)
head(newfulldata, 5)
head(newfulldata, 15)
head(newfulldata, 150)
head(newfulldata, 1500)
newfulldata$daytype[weekend == TRUE] <- "weekend"
newfulldata$daytype <- as.factor(newfulldata$daytype)
weekdays(as.Date(newfulldata$date[3]))
newfulldata <- aggregate(steps ~ interval + dateType, data=newfulldata, mean)
ggplot(averagedActivityDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
newfulldata <- aggregate(steps ~ interval + dateType, data=newfulldata, mean)
newfulldata <- aggregate(steps ~ interval + daytype, data=newfulldata, mean)
head(newfulldata)
ggplot(newfulldata, aes(interval, steps)) +
geom_line() +
facet_grid(daytype ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
knit2html()
library(knitr)
install.packages("knitr")
library(knitr)
source(activity.R)
source("activity.R")
source("activity.R")
knit2html()
library(knitr)
opts_chunk$set(echo = TRUE)
cls = c("integer", "character", "integer")
datafile <- read.csv("activity.csv", head=TRUE, colClasses=cls, na.strings="NA")
stepsperday <- tapply(datafile$steps, datafile$date, sum, na.rm=TRUE)
hist(x=stepsperday, col="green", breaks=20, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day")
stepsperdaymean <- mean(stepsperday)
stepsperdaymedian <- median(stepsperday)
## median(stepsperday)
## [1] 10395
## mean(stepsperday)
## [1] 9354.23
averagestepinterval <- aggregate(x=list(meansteps=datafile$steps), by=list(interval=datafile$interval), FUN=mean, na.rm=TRUE)
ggplot(data=averagestepinterval, aes(x=interval, y=meansteps)) + geom_line() + xlab("5 min Interval") +
+     ylab("Average number of steps taken")
averagestepinterval[averagestepinterval$meansteps==max(averagestepinterval$meansteps),]
## interval meansteps
## 104      835  206.1698
fulldata <- datafile
isna <- is.na(fulldata$steps)
avginterval <- tapply(fulldata$steps, fulldata$interval, mean, na.rm=TRUE, simplify=TRUE)
fulldata$steps[isna] <- avginterval[as.character(fulldata$interval[isna])]
sum(is.na(fulldata$steps))
## [1] 0
newstepsperday <- tapply(fulldata$steps, fulldata$date, sum)
hist(x=newstepsperday, col="green", breaks=20, xlab="Total Steps per Day", ylab="Frequency", main="Total number of steps taken each day without NA values")
mean(newstepsperday)
##[1] 10766.19
median(newstepsperday)
##[1] 10766.19
#new data frame
newfulldata <- fulldata
#keep all weekends
weekend <- weekdays(as.Date(newfulldata$date)) %in% c("Saturday", "Sunday")
# fill in weekdays column
newfulldata$daytype <- "weekday"
## replace "weekday" with "weekend" where days are Saturday or Sunday
newfulldata$daytype[weekend == TRUE] <- "weekend"
## convert new character column to factor
newfulldata$daytype <- as.factor(newfulldata$daytype)
newfulldata <- aggregate(steps ~ interval + dateType, data=newfulldata, mean)
ggplot(newfulldata, aes(interval, steps)) +
geom_line() +
facet_grid(daytype ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
library(knitr)
setwd("C:/Users/i50096/repdata_data_activity")
knit2html(“PA1_template.Rmd”)
"
library(knitr)
library(knitr)
knit2html(“PA1_template.Rmd”)
knit2html(“PA1_template.Rmd”)
knit2html(“PA1_template.Rmd”)
knit2html(PA1_template.Rmd)
setwd("C:/Users/i50096/repdata_data_activity/RepData_PeerAssessment1")
knit2html(PA1_template.Rmd)
knit2html(“PA1_template.Rmd”)
